# -*- coding: utf-8 -*-
"""TK_lab2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1D3VYbX-cXtkV4zxLAnGazK3lUGqQ6K0f

–í—ã–ø–æ–ª–Ω–∏–ª–∞ –¢–µ–ø–ª—è–∫–æ–≤–∞ –Æ–ª–∏—è
–ì—Ä—É–ø–ø–∞ 6403-010302

## –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫
"""

import numpy as np

"""# **–ß–∞—Å—Ç—å 1**

## –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ä–æ–∂–¥–∞—é—â—É—é –º–∞—Ç—Ä–∏—Ü—É –ª–∏–Ω–µ–π–Ω–æ–≥–æ –∫–æ–¥–∞ (7, 4, 3)
"""

# –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞
k = 4
n = 7
d = 3

# ùê∫ = [ùêºùëò|ùëã]
# –°–æ–∑–¥–∞–Ω–∏–µ –µ–¥–∏–Ω–∏—á–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã ùêºùëò
I_k = np.eye(k, dtype=int)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–∞—Ç—Ä–∏—Ü—ã X
def generate_X(k, n):
    rows = []
    total_columns = n - k

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –¥–≤–æ–∏—á–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –¥–ª–∏–Ω—ã total_columns
    for i in range(1 << total_columns):
      row = [int(bit) for bit in bin(i)[2:].zfill(total_columns)]

      if sum(row) >= 2 and row not in rows:
        rows.append(row)

      if len(rows) >= k:
        break

    return np.array(rows, dtype=int)

X = generate_X(k, n)

# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ä–æ–∂–¥–∞—é—â–µ–π –º–∞—Ç—Ä–∏—Ü—ã G
G = np.hstack((I_k, X))

print("–ü–æ—Ä–æ–∂–¥–∞—é—â–∞—è –º–∞—Ç—Ä–∏—Ü–∞ G:")
print(G)

"""## –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–æ—á–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Ä–æ–∂–¥–∞—é—â–µ–π"""

# –°–æ–∑–¥–∞–Ω–∏ –µ–¥–∏–Ω–∏—á–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã I_{n-k}
I_n_k = np.eye(n-k, dtype=int)

# ùêª = [ ùëã
#      ùêºùëõ‚àíùëò]
H = np.vstack((X, I_n_k))

print("–ü—Ä–æ–≤–µ—Ä–æ—á–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ H:")
print(H)

"""## –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É —Å–∏–Ω–¥—Ä–æ–º–æ–≤ –¥–ª—è –≤—Å–µ—Ö –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω—ã—Ö –æ—à–∏–±–æ–∫"""

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å–∏–Ω–¥—Ä–æ–º–æ–≤
syndromes = {}
for i in range(n):
    E = np.zeros(n, dtype=int)
    E[i] = 1

    # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å–∏–Ω–¥—Ä–æ–º–∞
    S = (E @ H) % 2

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–∏–Ω–¥—Ä–æ–º–∞ –≤ —Ç–∞–±–ª–∏—Ü—É
    syndromes[tuple(S)] = tuple(E)

print("–¢–∞–±–ª–∏—Ü–∞ —Å–∏–Ω–¥—Ä–æ–º–æ–≤:")
for syndrome, error_vector in syndromes.items():
  print(f"–°–∏–Ω–¥—Ä–æ–º {syndrome} -> –û—à–∏–±–∫–∞ {error_vector}")

"""## –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª–∏–Ω—ã n –∏–∑ —Å–ª–æ–≤–∞ –¥–ª–∏–Ω—ã k. –í–Ω–µ—Å—Ç–∏ –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω—É—é –æ—à–∏–±–∫—É –≤ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ. –í—ã—á–∏—Å–ª–∏—Ç—å —Å–∏–Ω–¥—Ä–æ–º, –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–∞–±–ª–∏—Ü—ã —Å–∏–Ω–¥—Ä–æ–º–æ–≤. –£–±–µ–¥–∏—Ç—å—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞."""

# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ (n) –∏–∑ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞ (k)
message = np.random.randint(0, 2, size=k)
print("–ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", message)
codeword = (message @ G) % 2
print("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:", codeword)

# –í–Ω–µ—Å–µ–Ω–∏–µ –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–π –æ—à–∏–±–∫–∏ –≤ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ
error_position = np.random.randint(0, n)
codeword_with_error = codeword.copy()
codeword_with_error[error_position] ^= 1
print("–í —Ö–æ–¥–µ –ø–µ—Ä–µ–¥–∞—á–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞\n–ü—Ä–∏–Ω—è—Ç–æ:", codeword_with_error)

# –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å–∏–Ω–¥—Ä–æ–º–∞
syndrome = (codeword_with_error @ H) % 2
print("–°–∏–Ω–¥—Ä–æ–º:", syndrome)

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏
if tuple(syndrome) in syndromes:
    error_vector = syndromes[tuple(syndrome)]
    print("–í –ø—Ä–∏–Ω—è—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∞\n–û—à–∏–±–∫–∞:", error_vector)

    corrected_codeword = codeword_with_error.copy()
    corrected_codeword[np.where(np.array(error_vector) == 1)[0]] ^= 1

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–ª–∏—á–∏–µ –æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ
    if not np.array_equal(corrected_codeword, codeword):
        print("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ.")
    else:
        print("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º.")
else:
    corrected_codeword = codeword_with_error
print("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", corrected_codeword)

# –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
decoded_message = (corrected_codeword @ G.T) % 2
print("–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", decoded_message)

"""## –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª–∏–Ω—ã n –∏–∑ —Å–ª–æ–≤–∞ –¥–ª–∏–Ω—ã k. –í–Ω–µ—Å—Ç–∏ –¥–≤—É–∫—Ä–∞—Ç–Ω—É—é –æ—à–∏–±–∫—É –≤ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ. –í—ã—á–∏—Å–ª–∏—Ç—å —Å–∏–Ω–¥—Ä–æ–º, –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–∞–±–ª–∏—Ü—ã —Å–∏–Ω–¥—Ä–æ–º–æ–≤. –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ"""

# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ (n) –∏–∑ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞ (k)
message = np.random.randint(0, 2, size=k)
print("–ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", message)
codeword = (message @ G) % 2
print("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:", codeword)

# –í–Ω–µ—Å–µ–Ω–∏–µ –¥–≤—É–∫—Ä–∞—Ç–Ω–æ–π –æ—à–∏–±–∫–∏ –≤ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ
error_positions = np.random.choice(n, 2, replace=False)
error_codeword = codeword.copy()
error_codeword[error_positions] = (error_codeword[error_positions] + 1) % 2
print("–í —Ö–æ–¥–µ –ø–µ—Ä–µ–¥–∞—á–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞\n–ü—Ä–∏–Ω—è—Ç–æ:", error_codeword)

# –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å–∏–Ω–¥—Ä–æ–º–∞
syndrome = (error_codeword @ H) % 2
print("–°–∏–Ω–¥—Ä–æ–º:", syndrome)

# –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É
error_vector = syndromes.get(tuple(syndrome), None)
if error_vector is not None:
    print("–í –ø—Ä–∏–Ω—è—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∞\n–û—à–∏–±–∫–∞:", error_vector)
    corrected_codeword = error_codeword.copy()
    corrected_codeword[np.where(error_vector)[0]] ^= 1
    print("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", corrected_codeword)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–ª–∏—á–∏–µ –æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ
    if not np.array_equal(corrected_codeword, codeword):
        print("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ.")
    else:
        print("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º.")
else:
    print("–û—à–∏–±–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞.")

"""## **–ß–∞—Å—Ç—å 2**

## –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ä–æ–∂–¥–∞—é—â—É—é –º–∞—Ç—Ä–∏—Ü—É –ª–∏–Ω–µ–π–Ω–æ–≥–æ –∫–æ–¥–∞ (n, k, 5)
"""

# –∞) –±—ã–ª–æ –Ω–µ –º–µ–Ω—å—à–µ 4 –µ–¥–∏–Ω–∏—Ü –≤ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ;
# –±) —Å—É–º–º–∞ –ª—é–±—ã—Ö –¥–≤—É—Ö —Å—Ç—Ä–æ–∫ —Å–æ–¥–µ—Ä–∂–∞–ª–∞ –Ω–µ –º–µ–Ω–µ–µ 3 –µ–¥–∏–Ω–∏—Ü;
# –≤) —Å—É–º–º–∞ –ª—é–±—ã—Ö —Ç—Ä—ë—Ö —Å—Ç—Ä–æ–∫ —Å–æ–¥–µ—Ä–∂–∞–ª–∞ –Ω–µ –º–µ–Ω–µ–µ 2 –µ–¥–∏–Ω–∏—Ü;
# –≥) —Å—É–º–º–∞ –ª—é–±—ã—Ö —á–µ—Ç—ã—Ä—ë—Ö —Å—Ç—Ä–æ–∫ —Å–æ–¥–µ—Ä–∂–∞–ª–∞ –Ω–µ –º–µ–Ω–µ–µ 1 –µ–¥–∏–Ω–∏—Ü—ã;

def check_conditions(X):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏—è (–∞)
    for row in X:
        if np.sum(row) < 4:
            return False

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏—è (–±)
    for i in range(len(X)):
        for j in range(i + 1, len(X)):
            if np.sum(X[i] + X[j]) < 3:
                return False

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏—è (–≤)
    for i in range(len(X)):
        for j in range(i + 1, len(X)):
            for k in range(j + 1, len(X)):
                if np.sum(X[i] + X[j] + X[k]) < 2:
                    return False

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏—è (–≥)
    for i in range(len(X)):
        for j in range(i + 1, len(X)):
            for k in range(j + 1, len(X)):
                for l in range(k + 1, len(X)):
                    if np.sum(X[i] + X[j] + X[k] + X[l]) < 1:
                        return False

    return True

def generate_generator_matrix(n, k):
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Ä–æ–∂–¥–∞—é—â–µ–π –º–∞—Ç—Ä–∏—Ü—ã
    G = np.zeros((k, n), dtype=int)

    # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –µ–¥–∏–Ω–∏—á–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã
    G[:, :k] = np.eye(k, dtype=int)

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∞—Ç—Ä–∏—Ü—ã X
    found = False
    while not found:
        X = np.random.randint(0, 2, size=(k, n - k))
        G[:, k:] = X

        if check_conditions(X):
            found = True

    return G

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
n = 7
k = 3

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Ä–æ–∂–¥–∞—é—â–µ–π –º–∞—Ç—Ä–∏—Ü—ã
G = generate_generator_matrix(n, k)

print("–ü–æ—Ä–æ–∂–¥–∞—é—â–∞—è –º–∞—Ç—Ä–∏—Ü–∞ G:")
print(G)

"""## –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–æ—á–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Ä–æ–∂–¥–∞—é—â–µ–π."""

def generate_parity_check_matrix(G):
  X = generate_X(k, n)
  I_n_k = np.eye(n-k, dtype=int)
  H = np.vstack((X, I_n_k))

  return H

H = generate_parity_check_matrix(G)

print("–ü—Ä–æ–≤–µ—Ä–æ—á–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ H:")
print(H)

"""## –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É —Å–∏–Ω–¥—Ä–æ–º–æ–≤ –¥–ª—è –≤—Å–µ—Ö –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω—ã—Ö –∏ –¥–≤—É–∫—Ä–∞—Ç–Ω—ã—Ö –æ—à–∏–±–æ–∫"""

def generate_syndrome_table(H):
    syndrome_table = {}

    # –û–¥–Ω–æ–∫—Ä–∞—Ç–Ω—ã–µ –æ—à–∏–±–∫–∏
    for i in range(n):
        e = np.zeros(n, dtype=int)
        e[i] = 1  # –û—à–∏–±–∫–∞ –≤ –ø–æ–∑–∏—Ü–∏–∏ i
        syndrome = np.dot(e, H) % 2
        syndrome_table[tuple(syndrome)] = f"–û—à–∏–±–∫–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {i + 1}"

    # –î–≤—É–∫—Ä–∞—Ç–Ω—ã–µ –æ—à–∏–±–∫–∏
    for i in range(n):
        for j in range(i + 1, n):
            e = np.zeros(n, dtype=int)
            e[i] = 1
            e[j] = 1  # –û—à–∏–±–∫–∞ –≤ –ø–æ–∑–∏—Ü–∏—è—Ö i –∏ j
            syndrome = np.dot(e, H) % 2
            syndrome_table[tuple(syndrome)] = f"–û—à–∏–±–∫–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ({i + 1}, {j + 1})"

    return syndrome_table

syndrome_table = generate_syndrome_table(H)

print("–¢–∞–±–ª–∏—Ü–∞ —Å–∏–Ω–¥—Ä–æ–º–æ–≤:")
for syndrome, error in syndrome_table.items():
  print(f"–°–∏–Ω–¥—Ä–æ–º {syndrome} -> –û—à–∏–±–∫–∞ {error}")

"""## –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª–∏–Ω—ã n –∏–∑ —Å–ª–æ–≤–∞ –¥–ª–∏–Ω—ã k. –í–Ω–µ—Å—Ç–∏ –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω—É—é –æ—à–∏–±–∫—É –≤ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ. –í—ã—á–∏—Å–ª–∏—Ç—å —Å–∏–Ω–¥—Ä–æ–º, –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–∞–±–ª–∏—Ü—ã —Å–∏–Ω–¥—Ä–æ–º–æ–≤. –£–±–µ–¥–∏—Ç—å—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞."""

# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ (n) –∏–∑ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞ (k)
message = np.random.randint(0, 2, size=k)
print("–ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", message)
codeword = (message @ G) % 2
print("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:", codeword)

# –í–Ω–µ—Å–µ–Ω–∏–µ –¥–≤—É–∫—Ä–∞—Ç–Ω–æ–π –æ—à–∏–±–∫–∏ –≤ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ
error_positions = np.random.choice(n, 2, replace=False)
error_codeword = codeword.copy()
error_codeword[error_position] ^= 1
print("–í —Ö–æ–¥–µ –ø–µ—Ä–µ–¥–∞—á–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞\n–ü—Ä–∏–Ω—è—Ç–æ:", error_codeword)

# –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å–∏–Ω–¥—Ä–æ–º–∞
syndrome = (error_codeword @ H) % 2
print("–°–∏–Ω–¥—Ä–æ–º:", syndrome)

# –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É
error_correction = syndrome_table.get(tuple(syndrome), None)
print(error_correction)

if error_correction:
  corrected_codeword = np.copy(error_codeword)
  corrected_codeword[error_position] ^= 1
  print(f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ: {corrected_codeword}")
else:
  print("–û—à–∏–±–∫–∞ –Ω–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞.")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–ª–∏—á–∏–µ –æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ
if not np.array_equal(corrected_codeword, codeword):
  print("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ.")
else:
  print("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º.")

"""## –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª–∏–Ω—ã n –∏–∑ —Å–ª–æ–≤–∞ –¥–ª–∏–Ω—ã k. –í–Ω–µ—Å—Ç–∏ –¥–≤—É–∫—Ä–∞—Ç–Ω—É—é –æ—à–∏–±–∫—É –≤ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ. –í—ã—á–∏—Å–ª–∏—Ç—å —Å–∏–Ω–¥—Ä–æ–º, –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–∞–±–ª–∏—Ü—ã —Å–∏–Ω–¥—Ä–æ–º–æ–≤. –£–±–µ–¥–∏—Ç—å—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞."""

# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ (n) –∏–∑ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞ (k)
message = np.random.randint(0, 2, size=k)
print("–ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", message)
codeword = (message @ G) % 2  # —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
print("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:", codeword)

# –í–Ω–µ—Å–µ–Ω–∏–µ –¥–≤—É–∫—Ä–∞—Ç–Ω–æ–π –æ—à–∏–±–∫–∏ –≤ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ
error_positions = np.random.choice(n, 2, replace=False)
error_codeword = codeword.copy()
error_codeword[error_positions] ^= 1  # –≤–Ω–µ—Å–µ–Ω–∏–µ –æ—à–∏–±–æ–∫
print("–í —Ö–æ–¥–µ –ø–µ—Ä–µ–¥–∞—á–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞\n–ü—Ä–∏–Ω—è—Ç–æ:", error_codeword)

# –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å–∏–Ω–¥—Ä–æ–º–∞
syndrome = (error_codeword @ H) % 2
print("–°–∏–Ω–¥—Ä–æ–º:", syndrome)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã —Å–∏–Ω–¥—Ä–æ–º–æ–≤
syndrome_table = generate_syndrome_table(H)  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞

# –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É
error_correction = syndrome_table.get(tuple(syndrome), None)

if error_correction:
    corrected_codeword = np.copy(error_codeword)

    for pos in error_positions:
        corrected_codeword[pos] ^= 1
    print(f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ: {corrected_codeword}")
else:
    print("–û—à–∏–±–∫–∞ –Ω–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞.")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–ª–∏—á–∏–µ –æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ
if not np.array_equal(corrected_codeword, codeword):
    print("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ.")
else:
    print("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º.")

"""## –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª–∏–Ω—ã n –∏–∑ —Å–ª–æ–≤–∞ –¥–ª–∏–Ω—ã k. –í–Ω–µ—Å—Ç–∏ —Ç—Ä—ë—Ö–∫—Ä–∞—Ç–Ω—É—é –æ—à–∏–±–∫—É –≤ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ. –í—ã—á–∏—Å–ª–∏—Ç—å —Å–∏–Ω–¥—Ä–æ–º, –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–∞–±–ª–∏—Ü—ã —Å–∏–Ω–¥—Ä–æ–º–æ–≤. –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ."""

# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ (n) –∏–∑ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞ (k)
message = np.random.randint(0, 2, size=k)
print("–ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", message)
codeword = (message @ G) % 2
print("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:", codeword)

# –í–Ω–µ—Å–µ–Ω–∏–µ —Ç—Ä–µ—Ö–∫—Ä–∞—Ç–Ω–æ–π –æ—à–∏–±–∫–∏ –≤ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ
error_positions = np.random.choice(n, 3, replace=False)
error_codeword = codeword.copy()
error_codeword[error_positions] ^= 1
print("–í —Ö–æ–¥–µ –ø–µ—Ä–µ–¥–∞—á–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞\n–ü—Ä–∏–Ω—è—Ç–æ:", error_codeword)

# –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å–∏–Ω–¥—Ä–æ–º–∞
syndrome = (error_codeword @ H) % 2
print("–°–∏–Ω–¥—Ä–æ–º:", syndrome)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã —Å–∏–Ω–¥—Ä–æ–º–æ–≤
syndrome_table = generate_syndrome_table(H)

# –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É
error_correction = syndrome_table.get(tuple(syndrome), None)

if error_correction is not None:
    corrected_codeword = np.copy(error_codeword)

    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ error_correction —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª
    if isinstance(error_correction, list):
        for pos in error_correction:
            corrected_codeword[pos] ^= 1
        print(f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ: {corrected_codeword}")
    else:
        print("–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
else:
    print("–û—à–∏–±–∫–∞ –Ω–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞.")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–ª–∏—á–∏–µ –æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ
if not np.array_equal(corrected_codeword, codeword):
    print("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ.")
else:
    print("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º.")